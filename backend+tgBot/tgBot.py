import logging
import os
import asyncio, json
from datetime import datetime
from database import Database
from aiogram.dispatcher import Dispatcher
from aiogram import Bot, types
from keyboardsTG import keyboards

bot = Bot(token="6280443347:AAF12weiKnWGuXC79coakcoIBAv4gu-PLKQ")
db = Database("localhost", "5432", "postgres", "123321", "fsb_database")
keyboards = keyboards()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä
dp = Dispatcher(bot)

# import json
# data = {u'Processes': [[u'root', u'3606', u'0.0', u'0.2', u'76768', u'16664', u'?', u'Ss', u'20:40', u'0:01', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'4088', u'0.0', u'0.2', u'88544', u'20156', u'?', u'S', u'20:40', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'4090', u'0.0', u'0.2', u'88552', u'20140', u'?', u'S', u'20:40', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'4097', u'0.0', u'0.2', u'88552', u'20112', u'?', u'S', u'20:40', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0'], [u'root', u'4110', u'0.0', u'0.2', u'88548', u'20160', u'?', u'S', u'20:40', u'0:00', u'/usr/local/bin/python2 /usr/local/bin/gunicorn app:app -b 0.0.0.0:80 --log-file - --access-logfile - --workers 4 --keep-alive 0']], u'Titles': [u'USER', u'PID', u'%CPU', u'%MEM', u'VSZ', u'RSS', u'TTY', u'STAT', u'START', u'TIME', u'COMMAND']}
# data = json.dumps(data) # dict to string
# data = json.loads(data) # string to json
# print data['Processes']

@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    userData = await db.getAllbyTG(message.from_user.id)
    if userData:

        user_id = userData['id']
        role = userData['role']
        login = userData['login']
        first_name = userData['first_name']
        last_name = userData['last_name']
        petronymic = userData['petronymic']
        teams = userData['teams']
        actions = userData['actions']
        rating = userData['actions']


        if message.text == "/start":
            await message.reply("–ú–µ–Ω—é:", reply_markup=keyboards.mainKeyboard(role))
        if message.text.lower() == "üí¨ –ø–æ–º–æ—â—å":
            msg = [
                "üìÉ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>",
                "\n–ü–æ—á—Ç–∞: emailtopaste@gmail.com",
                "–¢–µ–ª–µ—Ñ–æ–Ω: +79998886655",
                "\n...",
            ]

            await message.reply("\n".join(msg), parse_mode="HTML")
        if role == 0:
            if message.text.lower() == "üí• –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
                events = await db.getEvents(json.loads(teams))
                if events:
                    for k, val in enumerate(events):
                        eventsList = []
                        eventsList.append(f"<b>{k + 1}.</b> {val['name']}\n")
                        eventsList.append(f"\n<code>{val['description']}</code>\n")
                        people = await db.getPeopleOfTeams(json.loads(val['teams']))
                        eventsList.append(f"–ö–æ–º–∞–Ω–¥—ã —É—á–∞—Å—Ç–≤—É—é—Ç: {len(json.loads(val['teams']))} ({people} —á–µ–ª.)")
                        eventsList.append(
                            f"\n–ù–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <code>{datetime.utcfromtimestamp(val['datestart']).strftime('%Y-%m-%d %H:%M')}</code>")
                        eventsList.append(
                            f"–ö–æ–Ω–µ—Ü –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <code>{datetime.utcfromtimestamp(val['dateend']).strftime('%Y-%m-%d %H:%M')}</code>")

                        if (val['photo'] == "null"):
                            await message.reply("\n".join(eventsList), parse_mode="HTML")
                        else:
                            await bot.send_photo(
                                message.chat.id, val['photo'], caption="\n".join(eventsList),
                                reply_to_message_id=message.message_id, parse_mode="HTML")

                else:
                    await message.reply("–£–ø—Å, –Ω–µ –Ω–∞—à–µ–ª –≤–∞—Å –Ω–∏–≥–¥–µ!! ")
            elif message.text.lower() == "üë• –º–æ—è –∫–æ–º–∞–Ω–¥–∞":
                team = json.loads(teams)
                if (len(team) != 0):
                    teams = await db.getTeamsByUser(team)
                    if (len(teams) != 0):
                        for k, val in enumerate(teams):
                            msg = []
                            msg.append(f"\n<b>{k + 1}.</b> {teams[k]['name']}\n")
                            msg.append(f"<code>{teams[k]['description']}</code>\n")
                            msg.append(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(json.loads(teams[k]['users']))};")
                            # msg.append(f"–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –≤ –∫–µ–π—Å–∞—Ö: {len(json.loads(teams[k]['events']))};")

                            if (json.loads(teams[k]['users'])[0] == user_id):
                                msg.append("–õ–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã - –í—ã.")
                            else:
                                teamlid = db.getUserByID(json.loads(teams[k]['users'])[0])
                                if teamlid:
                                    msg.append(
                                        f"–õ–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã - {teamlid['first_name']} {teamlid['last_name']} {teamlid['petronymic']}")

                            if (teams[k]['photo'] == "null"):
                                await message.reply("\n".join(msg), parse_mode="HTML")
                            else:
                                await bot.send_photo(
                                    message.chat.id, teams[k]['photo'], caption="\n".join(msg),
                                    reply_to_message_id=message.message_id, parse_mode="HTML")
                    else:
                        await message.reply("–Ø –Ω–µ –Ω–∞—à–µ–ª –∑–∞ —Ç–æ–±–æ–π –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...")
                else:
                    await message.reply("–Ø –Ω–µ –Ω–∞—à–µ–ª –∑–∞ —Ç–æ–±–æ–π –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...")

        if role == 3: #  0(user teamlid), 1 - predstavitel, 2 - admin, 3 partner
            if message.text.lower() == "—Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ":
                sponsor = json.loads(userData['sponspor'])
                if len(sponsor) == 0:
                    await message.reply("–í–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–ø–∞–Ω–∏–∏")
                else:
                    array = []
                    for k, val in enumerate(sponsor): # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ–º—É –º–µ—Å—Ç—É
                        res = await db.getActiveEvents(sponsored=True, id_transfer=val)
                        if res:
                            array.append(res)
                    if len(array) == 0:
                        await message.reply("–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è " + str(len(array)))
                    else:
                        for k, val in enumerate(array): # –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞
                            eventsList = []
                            for j, p in enumerate(val): # –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø—Ä–æ—Ö–æ–¥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—Ö
                                eventsList = []
                                eventsList.append(f"<b>{j + 1}.</b> {p['name']}\n")
                                eventsList.append(f"\n<code>{p['description']}</code>\n")
                                people = await db.getPeopleOfTeams(json.loads(p['teams']))
                                eventsList.append(f"–ö–æ–º–∞–Ω–¥—ã —É—á–∞—Å—Ç–≤—É—é—Ç: {len(json.loads(p['teams']))} ({people} —á–µ–ª.)")
                                eventsList.append(
                                    f"\n–ù–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <code>{datetime.utcfromtimestamp(p['datestart']).strftime('%Y-%m-%d %H:%M')}</code>")
                                eventsList.append(
                                    f"–ö–æ–Ω–µ—Ü –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <code>{datetime.utcfromtimestamp(p['dateend']).strftime('%Y-%m-%d %H:%M')}</code>")
                                currentEvent = json.loads(p['sponsors'])
                                eventsList.append(f"\n–í—Å–µ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: {len(currentEvent)}")

                                for currentSponsor in currentEvent:
                                    eventsList.append(f"\n<code>–°–ø–æ–Ω—Å–∏—Ä—É–µ—Ç—Å—è: {currentSponsor['name']}")
                                    eventsList.append(f"–ù–∞ —É—Å–ª–æ–≤–∏—è—Ö: {currentSponsor['regulations']}</code>")
                                if (p['photo'] == "null"):
                                    await message.reply("\n".join(eventsList), parse_mode="HTML")
                                else:
                                    await bot.send_photo(
                                        message.chat.id, p['photo'], caption="\n".join(eventsList),
                                        reply_to_message_id=message.message_id, parse_mode="HTML")
            if message.text.lower() == "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é":
                sponsor = json.loads(userData['sponspor'])
                if len(sponsor) == 0:
                    await message.reply("–í–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–ø–∞–Ω–∏–∏")
                else:
                    array = []
                    for k, val in enumerate(sponsor):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ–º—É –º–µ—Å—Ç—É
                        res = await db.getSponsorByid(val)
                        if res:
                            msg = []
                            msg.append(f"<b>{res['name']}</b>\n")
                            msg.append(f"<code>{res['about']}</code>\n")
                            if (res['photo'] == "null"):
                                await message.reply("\n".join(msg), parse_mode="HTML")
                            else:
                                await bot.send_photo(
                                    message.chat.id, res['photo'], caption="\n".join(msg),
                                    reply_to_message_id=message.message_id, parse_mode="HTML")
                        else:
                            message.reply("–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–∏ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–≤–∏—Ç–µ–ª–µ–º –Ω–∏ 1 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        if role == 1:
            if message.text.lower() == "–º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
                parent = json.loads(userData['parent'])
                if len(parent) == 0:
                    await message.reply("–í–∞—Å –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –∫–∞–∫–æ–π-–ª–∏–±–æ —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏")
                else:
                    array = []
                    for k, val in enumerate(parent):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ–º—É –º–µ—Å—Ç—É
                        res = await db.getActiveEvents(parent=True, id_transfer=val)
                        if res:
                            array.append(res)
                    if len(array) == 0:
                        await message.reply("–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö" + str(len(array)))
                    else:
                        for k, val in enumerate(
                                array):  # –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —Å–ø–æ–Ω–æ—Å—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞
                            eventsList = []
                            for j, p in enumerate(
                                    val):  # –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø—Ä–æ—Ö–æ–¥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ø–æ–Ω—Å–æ—Ä—É –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—Ö
                                eventsList = []
                                eventsList.append(f"<b>{j + 1}.</b> {p['name']}\n")
                                eventsList.append(f"\n<code>{p['description']}</code>\n")

                                print(json.loads(p['teams']))
                                people = await db.getPeopleOfTeams(json.loads(p['teams']))
                                eventsList.append(f"–ö–æ–º–∞–Ω–¥—ã —É—á–∞—Å—Ç–≤—É—é—Ç: {len(json.loads(p['teams']))} ({people} —á–µ–ª.)")
                                eventsList.append(
                                    f"\n–ù–∞—á–∞–ª–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <code>{datetime.utcfromtimestamp(p['datestart']).strftime('%Y-%m-%d %H:%M')}</code>")
                                eventsList.append(
                                    f"–ö–æ–Ω–µ—Ü –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <code>{datetime.utcfromtimestamp(p['dateend']).strftime('%Y-%m-%d %H:%M')}</code>")

                                currentEvent = json.loads(p['sponsors'])
                                eventsList.append(f"\n–í—Å–µ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: {len(currentEvent)}")

                                for currentSponsor in currentEvent:
                                    eventsList.append(f"\n<code>–°–ø–æ–Ω—Å–∏—Ä—É–µ—Ç—Å—è: {currentSponsor['name']}")
                                    eventsList.append(f"–ù–∞ —É—Å–ª–æ–≤–∏—è—Ö: {currentSponsor['regulations']}</code>")
                                if (p['photo'] == "null"):
                                    await message.reply("\n".join(eventsList), parse_mode="HTML")
                                else:
                                    await bot.send_photo(
                                        message.chat.id, p['photo'], caption="\n".join(eventsList),
                                        reply_to_message_id=message.message_id, parse_mode="HTML")
    else:
        await message.reply("–£–ø—Å, —è –≤–∞—Å –Ω–µ –Ω–∞—à–µ–ª.\n–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ!")
async def on_startup(dispatcher):
    print("open DB")

async def on_shutdown(dispatcher):
    print("closed DB")
    await db.disconnect()
async def main():
    await db.connect()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
